import uuid
from typing import List, Optional, Literal
from pydantic import BaseModel, Field
from datetime import datetime

# Enum for Task Status
class TaskStatus(str, BaseModel):
    status: Literal['pending', 'in-progress', 'completed', 'blocked'] = 'pending'

# Enum for Task Complexity
class TaskComplexity(str, BaseModel):
    complexity: Literal['simple', 'medium', 'complex', None] = None

class TaskBase(BaseModel):
    title: str
    description: Optional[str] = None
    status: TaskStatus = Field(default_factory=TaskStatus)
    complexity: TaskComplexity = Field(default_factory=TaskComplexity)
    estimated_time: Optional[str] = Field(default=None, alias="estimatedTime") # e.g., '2h', '1d'

class TaskCreate(TaskBase):
    # project_id will be sourced from the path parameter in the API endpoint
    # id, created_at, updated_at will be generated by the server/database
    parent_id: Optional[uuid.UUID] = Field(default=None, alias="parentId")
    # Allow specifying dependencies on creation if needed, though this can be complex
    # For now, let's assume dependencies are added via an update after creation for simplicity,
    # or that the LLM process_prompt_to_plan handles initial dependency setup.
    # If we want to allow creating with dependencies, add:
    # dependencies: Optional[List[uuid.UUID]] = Field(default_factory=list)

class TaskUpdate(BaseModel):
    title: Optional[str] = None
    description: Optional[str] = None
    status: Optional[TaskStatus] = None # Keep TaskStatus as a structured model for updates
    complexity: Optional[TaskComplexity] = None # Keep TaskComplexity as a structured model
    estimated_time: Optional[str] = Field(default=None, alias="estimatedTime")
    dependencies: Optional[List[uuid.UUID]] = None
    # project_id and parent_id are generally not updated via this kind of endpoint
    # Sub-tasks are also typically managed via separate operations or a more complex update structure

    class Config:
        allow_population_by_field_name = True

class Task(TaskBase):
    id: uuid.UUID = Field(default_factory=uuid.uuid4)
    project_id: uuid.UUID = Field(alias="projectId")
    parent_id: Optional[uuid.UUID] = Field(default=None, alias="parentId")
    dependencies: List[uuid.UUID] = Field(default_factory=list)
    sub_tasks: List['Task'] = Field(default_factory=list, alias="subTasks") # Forward reference for self-nesting
    created_at: datetime = Field(default_factory=datetime.utcnow, alias="createdAt")
    updated_at: datetime = Field(default_factory=datetime.utcnow, alias="updatedAt")

    class Config:
        orm_mode = True
        allow_population_by_field_name = True

Task.update_forward_refs() # Resolve forward reference for Task.sub_tasks

class ProjectBase(BaseModel):
    name: str
    original_prompt: str = Field(alias="originalPrompt")

class ProjectCreate(ProjectBase):
    pass

class Project(ProjectBase):
    id: uuid.UUID = Field(default_factory=uuid.uuid4)
    tasks: List[Task] = Field(default_factory=list)
    created_at: datetime = Field(default_factory=datetime.utcnow, alias="createdAt")
    updated_at: datetime = Field(default_factory=datetime.utcnow, alias="updatedAt")

    class Config:
        orm_mode = True
        allow_population_by_field_name = True
